#!/usr/bin/python3
#
# This script is for easy-of-use from the CLI while launching USBAuth
#
'''
USBAuth, a USB device authentication tool.
Copyright (C) 2016  Oliver Stochholm Neven

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

For any further information contact me at oliver@neven.dk
'''
from paths import Paths

# Returns true if the script is running with root privileges
def check_for_root():
	from os import geteuid
	return geteuid() == 0

# Prints an error and exits if the script is not running as root, if it is, do nothing
def root_or_exit():
	if not check_for_root():
		print("You need to run this with root privileges!")
		exit()

# Handles argument parsing from the CLI
def parse_args():
	import argparse
	parser = argparse.ArgumentParser(description="USBAuth, a USB device authentication tool")
	parser.add_argument("--start", action="store_true", help="starts the program")
	parser.add_argument("--stop", action="store_true", help="stops the program, if it is running")
	parser.add_argument("-a", "--auth", type=int, help="prompts for authentication of a USB device with a chosen id")
	parser.add_argument("-d", "--deauth", type=int, help="prompts for deauthentication of a USB device with a chosen id")
	parser.add_argument("-l", "--list", action="store_true", help="shows a list of all the connected USB devices")
	parser.add_argument("-p", "--password", action="store_true", help="prompts for a new authentication password")
	parser.add_argument("-w", "--whitelist", type=int, help="prompts for whitelisting of a USB device with a chosen id")
	parser.add_argument("-q", "--quiet", action="store_true", help="stops the program from printing any messages to the screen")
	return parser.parse_args()

#
# Methods for staring and stopping the program
#

# Removes the PID file
def clean_pid_file():
	from os import remove
	try:
		remove(Paths.PID_FILE)
	except FileNotFoundError:
		pass

# Returns the value from the PID file as an integer or None if the file doesn't exist
def read_pid_file():
	try:
		Paths.create_paths()
		with open(Paths.PID_FILE, "rb") as f:
			PID = int(f.read().decode("UTF-8"))
			f.close()
			return PID
	except:
		return None

# Writes to the PID file and returns this scripts PID
def write_pid_file():
	from os import getpid
	PID = getpid()
	with open(Paths.PID_FILE, "wb") as f:
		f.write(str(PID).encode("UTF-8"))
		f.close()
	return PID

# Starts the program if the PID file is clean
def start_program(quiet):

	# Check that the PID file is clean
	if read_pid_file() is not None:
		print("Another instance of USBAuth is running.\nYou can stop USBAuth by running --stop")
		exit()

	# Start the listener
	Paths.delete_tmp_dir()
	Paths.create_paths()
	PID = write_pid_file()
	print("USBAuth started with a PID of", PID, end=".\n")
	from listener import Listener
	l = Listener(quiet)
	l.listen()

# Stops the program and cleans the PID file
def stop_program():

	# Checks if an instance of USBAuth is running
	PID = read_pid_file()
	if PID is None:
		print("USBAuth is not running.")
		exit()

	# Terminates the PID and cleans the PID file
	try:
		from os import kill
		from signal import SIGTERM
		kill(PID, SIGTERM)
		print("USBAuth terminated.")
	except ProcessLookupError:
		pass
	Paths.delete_tmp_dir()

#
# Methods for prompting the user
#

# Prompts user for password and returns true if it matches the one stored on the disk, false if it does not
def prompt_and_verify_password():
	from password_manager import PasswordManager
	from getpass import getpass
	prompt = getpass("Enter your authentication password: ")
	return PasswordManager(None).verify_password_hash(prompt)

# Prompts the user for a yes or no answer and returns true if yes, and false is no
# Prints a message on the same line as the answer
#	Answers can be the following (case insensitive): yes, no, y, n
def prompt_yes_or_no(msg):
	answer = None
	returns = {"yes": True, "y": True, "no": False, "n": False}
	while not answer in returns:
		answer = input(msg + " [Y/n]: ").lower()
	return returns[answer]

# Prompts user for entering a new password, and confirming that password
# If the two entered passwords match, it returns them, if they did not, it returns None
def prompt_for_new_password():
	from getpass import getpass
	new_password = getpass("Enter a new authentication password: ")
	if new_password == getpass("Confirm the authentication password: "):
		return new_password
	else:
		return None

# Prompts user for entering a timespan
# Prints a message on the same line as the answer
#	For timespan syntax look at the README file
# Returns in the following syntax (timespan integer, unit integer)
def prompt_time(msg):
	answer = input(msg)

	# Check if 'forever' was chosen
	if answer == "0":
		return (0, 0)

	# Translate the answer into a timespan integer and unit code integer
	unit_translate = {"s": 0, "m": 1, "h": 2} # Unit codes
	if len(answer) > 0:

		# Translate the unit code
		unit_symbol = answer[-1:].lower() # The unit sybol should always be the last character in the answer
		if not unit_symbol in unit_translate:
			print("Timespan syntax error:", "'" + unit_symbol + "'", "can't be interpreted as an unit symbol.")
			exit()
		unit_code = unit_translate[unit_symbol]

		# Translate the timepan
		try:
			timespan = int(answer[:-1]) # The rest of the answer should be an integer value
		except ValueError:
			print("Timespan syntax error:", "'" + answer[:-1] + "'", "can't be interpreted as an integer.")
			exit()
	return (timespan, unit_code)

#
# Methods for authentication
#

# Prompts for and authenticates a USB device
def authenticate(id):

	# Check that a device with that ID exists
	# If it does, then also check that it's not authenticated
	from device_manager import DeviceManager
	dm = DeviceManager()
	devices = dm.list_connected_devices()
	if not id in range(len(devices)):
		print("No device with that ID.")
		exit()
	elif devices[id].is_authenticated():
		print("That device is already authenticated.")
		exit()

	# Prompt for authentication (let user apply the authentication password)
	try:
		print("Authentication undergoing on:\n" + devices[id].get_description())
		if prompt_and_verify_password():
			devices[id].authenticate()
			LOGGER.log("Authentication of " + devices[id].to_name_string() + " " + devices[id].to_id_string())
			print("Device successfully authenticated.")
		else:
			LOGGER.log("Failed authentication of " + devices[id].to_name_string() + " " + devices[id].to_id_string())
			print("Authentication failure: Bad password.")
	except KeyboardInterrupt:
		print("\nAuthentication failure: Exited by user.")

# Prompts for and deauthenticates a USB device
def deauthenticate(id):

	# Check that a device with that ID exists
	# If it does, then also check that it's authenticated
	from device_manager import DeviceManager
	dm = DeviceManager()
	devices = dm.list_connected_devices()
	if not id in range(len(devices)):
		print("No device with that ID.")
		exit()
	elif not devices[id].is_authenticated():
		print("That device is not authenticated.")
		exit()

	# Prompt for deauthentication (let user apply with yes or no)
	try:
		print("Deauthentication undergoing on:\n" + devices[id].get_description())
		if prompt_yes_or_no("Do you wish to deauthenticate this device?"):
			devices[id].deauthenticate()
			devices[id].update_whitelist(False)
			LOGGER.log("Deauthentication of " + devices[id].to_name_string() + " " + devices[id].to_id_string())
			print("Device successfully deauthenticated.")
		else:
			LOGGER.log("Failed deauthentication of " + devices[id].to_name_string() + " " + devices[id].to_id_string())
			print("Device remains authenticated.")
	except KeyboardInterrupt:
		print("\nDeauthentication failure: Exited by user.")

# Prompts for and updates the USB authentication password
# No need for entering the old authentication password, read the README for more info.
def update_password():
	print("Updating the USB device authentication password ...")
	try:
		# Prompt for and set a new password
		new_password = prompt_for_new_password()
		if new_password is not None:
			from password_manager import PasswordManager
			PasswordManager(LOGGER).update_password_hash(new_password)
			print("Password successfully updated.")
		else: print("Password updation failure: Passwords didn't match.")
	except KeyboardInterrupt:
		print("\nPassword updation failure: Exited by user.")

# Prompts for and whitelists a USB device
def whitelist(id):

	# Check that a device with that ID exists
	# If it does, then also check that it is authenticated and not whitlisted
	from device_manager import DeviceManager
	dm = DeviceManager()
	devices = dm.list_connected_devices()
	if not id in range(len(devices)):
		print("No device with that ID.")
		exit()
	elif not devices[id].is_authenticated():
		print("That device is not authenticated, and can therefore not be added to the white list.")
		exit()
	elif devices[id].is_whitelisted():
		print("That device is already whitelisted.")
		exit()

	# Prompt for whitelisting
	try:
		print("Whitelisting undergoing on:\n" + devices[id].get_description())
		if prompt_yes_or_no("Do you wish to whitelist this device?"):

			# Prompt for timespan
			timespan, unit_code = prompt_time("For how long do you wish to whitelist the device? (e.g. '30s', '10m', '2h' or '0' that represents forever): ")

			# Update the whitlisting state
			if timespan is 0: devices[id].update_whitelist(True)
			else: devices[id].update_whitelist(True, timespan=timespan, unit=unit_code)

			LOGGER.log("Whitelisting of " + devices[id].to_name_string() + " " + devices[id].to_id_string() + " untill " + devices[id].get_timeout_date_str())
			print("Device successfully whitelisted untill", devices[id].get_timeout_date_str() + ".")

	except KeyboardInterrupt:
		print("\nWhitelisting failure: Exited by user.")

# Prints a list of all the connected devices
def list_connected_devices():
	from device_manager import DeviceManager
	devices = DeviceManager().list_connected_devices()
	if len(devices) > 0:
		for i, device in enumerate(devices):
			msg = "[" + str(i) + "] " + device.to_name_string() + " " + device.to_id_string() + ", "
			if device.is_authenticated():
				if device.is_whitelisted():
					msg += "authenticated, whitelisted untill " + device.get_timeout_date_str() + "."
				else: msg += "authenticated."
			else: msg += "not authenticated."
			print(msg)
	else:
		print("No devices to list.")

#
# Script starts here
#

# Initialize logger
from logger import Logger
LOGGER = Logger(True)

# Parse arguments passed from the CLI
args = parse_args()
if args.start:
	root_or_exit()
	start_program(args.quiet)
elif args.stop:
	root_or_exit()
	stop_program()
elif args.auth is not None:
	root_or_exit()
	authenticate(args.auth)
elif args.deauth is not None:
	root_or_exit()
	deauthenticate(args.deauth)
elif args.password:
	root_or_exit()
	update_password()
elif args.whitelist is not None:
	root_or_exit()
	whitelist(args.whitelist)
elif args.list:
	root_or_exit()
	list_connected_devices()
else: print("Run 'usbauth --help' to see launch options.")
